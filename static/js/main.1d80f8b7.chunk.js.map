{"version":3,"sources":["components/BarChart.js","App.js","serviceWorker.js","index.js"],"names":["BarChart","width","height","margin","data","svgRef","useRef","graphGroupRef","xAxisGroupRef","yAxisGroupRef","barContainerRef","innerWidth","left","right","innerHeight","top","bottom","xAxis","d3","rangeRound","yAxis","trans","duration","useEffect","svg","current","xAxisGroup","yAxisGroup","barContainer","attr","domain","map","d","xAxisValue","yAxisValue","transition","call","ticks","tickSize","Math","abs","bars","selectAll","exit","style","remove","enter","append","ref","className","transform","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOA2HeA,EA9GE,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,OAAqC,IAA7BC,cAA6B,MAApB,GAAoB,MAAhBC,YAAgB,MAAT,GAAS,EACxDC,EAASC,mBACTC,EAAgBD,mBAChBE,EAAgBF,mBAChBG,EAAgBH,mBAChBI,EAAkBJ,mBAIlBK,EAAaV,EAAQE,EAAOS,KAAOT,EAAOU,MAC1CC,EAAcZ,EAASC,EAAOY,IAAMZ,EAAOa,OAG3CC,EAAQC,MAAeC,WAAW,CAAC,EAAGR,IACtCS,EAAQF,MAAiBC,WAAW,CAACL,EAAa,IAGlDO,EAAQH,MAAgBI,SAAS,KA+DvC,OA7DAC,qBAAU,WACR,IAAMC,EAAMN,IAAUb,EAAOoB,SAEvBC,GADaR,IAAUX,EAAckB,SACxBP,IAAUV,EAAciB,UACrCE,EAAaT,IAAUT,EAAcgB,SACrCG,EAAeV,IAAUR,EAAgBe,SAE/CD,EACGK,KAAK,QAAS,QACdA,KAAK,SAAU,QACfA,KAAK,UAHR,cAG0B5B,EAH1B,YAGmCC,IAChC2B,KAAK,sBAAuB,YAG/BZ,EAAMa,OAAO1B,GAAQA,EAAK2B,KAAI,SAAAC,GAAC,OAAIA,EAAEC,eACrCb,EAAMU,OAAO,CAAC,EAAGZ,IAAOd,GAAM,SAAA4B,GAAC,OAAIA,EAAEE,gBAGrCR,EAAWS,WAAWd,GAAOe,KAAKlB,IAAcD,IAChDU,EAAWQ,WAAWd,GAAOe,KAC3BlB,IACYE,GACTiB,MAAM,GACNC,UAAUC,KAAKC,IAAIvC,EAAQ,IAAK,EAAG,IAIxC,IAAMwC,EAAOb,EAAac,UAAU,QAAQtC,KAAKA,GAEjDqC,EACGE,OACAR,WAAWd,GAEXQ,KAAK,SAAU,GACfe,MAAM,UAAW,GACjBC,SAGHJ,EACGZ,KAAK,KAAM,GACXA,KAAK,KAAK,SAAAG,GAAC,OAAIf,EAAMe,EAAEC,eACvBJ,KAAK,QAAS,IACdM,aACAb,SAAS,KACTO,KAAK,UAAU,SAAAG,GAAC,OAAIlB,EAAcM,EAAMY,EAAEE,eAC1CL,KAAK,KAAK,SAAAG,GAAC,OAAIZ,EAAMY,EAAEE,eAG1BO,EACGK,QACAC,OAAO,QACPlB,KAAK,QAAS,OACdA,KAAK,KAAM,GACXA,KAAK,KAAM,GACXA,KAAK,KAAK,SAAAG,GAAC,OAAIf,EAAMe,EAAEC,eACvBJ,KAAK,KAAK,SAAAG,GAAC,OAAIZ,EAAMY,EAAEE,eACvBL,KAAK,QAAS,IACdA,KAAK,UAAU,SAAAG,GAAC,OAAIlB,EAAcM,EAAMY,EAAEE,eAC1CL,KAAK,OAAQ,aACf,CAACzB,IAGF,yBAAK4C,IAAK3C,GACR,uBAAG2C,IAAKzC,EAAeN,MAAOU,EAAYT,OAAQY,GAChD,uBACEkC,IAAKxC,EACLyC,UAAU,QACVC,UAAS,uBAAkBpC,EAAc,GAAhC,OAEX,uBACEkC,IAAKvC,EACLwC,UAAU,QACVC,UAAS,qBAEX,uBACEF,IAAKtC,EACLwC,UAAS,oBACTD,UAAU,4BClFLE,MAvBf,WACE,OACE,yBAAKF,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CACEhD,MAAO,IACPC,OAAQ,IACRC,OAAQ,CAAEY,IAAK,GAAIF,MAAO,GAAIG,OAAQ,GAAIJ,KAAM,IAChDR,KAAM,CACJ,CAAE6B,WAAY,QAASC,WAAY,IACnC,CAAED,WAAY,UAAWC,WAAY,IACrC,CAAED,WAAY,YAAaC,WAAY,IACvC,CAAED,WAAY,WAAYC,WAAY,IACtC,CAAED,WAAY,QAASC,WAAY,IACnC,CAAED,WAAY,SAAUC,WAAY,IACpC,CAAED,WAAY,SAAUC,WAAY,UCP5BkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1d80f8b7.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as d3 from \"d3\";\n\n/**\n * Bar Chart Component\n *\n * @param {Number} height\n * @param {Number} width\n * @param {Object} margin\n * @param {Array} data\n */\n\nconst BarChart = ({ width, height, margin = {}, data = [] }) => {\n  const svgRef = useRef();\n  const graphGroupRef = useRef();\n  const xAxisGroupRef = useRef();\n  const yAxisGroupRef = useRef();\n  const barContainerRef = useRef();\n\n  // <==========================(width x height) according to margiin convention==============================>\n\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n\n  // <==========================Axis Definations==============================>\n  const xAxis = d3.scaleBand().rangeRound([0, innerWidth]);\n  const yAxis = d3.scaleLinear().rangeRound([innerHeight, 0]);\n\n  // <==========================Transition constants==============================>\n  const trans = d3.transition().duration(500);\n\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    const graphGroup = d3.select(graphGroupRef.current);\n    const xAxisGroup = d3.select(xAxisGroupRef.current);\n    const yAxisGroup = d3.select(yAxisGroupRef.current);\n    const barContainer = d3.select(barContainerRef.current);\n\n    svg\n      .attr(\"width\", \"100%\")\n      .attr(\"height\", \"100%\")\n      .attr(\"viewBox\", `0 0 ${width} ${height}`)\n      .attr(\"preserveAspectRatio\", \"xMinYMin\");\n\n    // Axis Domains\n    xAxis.domain(data && data.map(d => d.xAxisValue));\n    yAxis.domain([0, d3.max(data, d => d.yAxisValue)]);\n\n    // Axis Calls\n    xAxisGroup.transition(trans).call(d3.axisBottom(xAxis));\n    yAxisGroup.transition(trans).call(\n      d3\n        .axisLeft(yAxis)\n        .ticks(5)\n        .tickSize(-Math.abs(width - 85), 0, 0)\n    );\n\n    // Bar Generation/Updates\n    const bars = barContainer.selectAll(\".bar\").data(data);\n    // Exit and Remove (bars)\n    bars\n      .exit()\n      .transition(trans)\n      // .attr('y', yAxis(0))\n      .attr(\"height\", 0)\n      .style(\"opacity\", 0)\n      .remove();\n\n    // Update Existing (bars)\n    bars\n      .attr(\"rx\", 0)\n      .attr(\"x\", d => xAxis(d.xAxisValue))\n      .attr(\"width\", 15)\n      .transition()\n      .duration(750)\n      .attr(\"height\", d => innerHeight - yAxis(d.yAxisValue))\n      .attr(\"y\", d => yAxis(d.yAxisValue));\n\n    // Create New (bars)\n    bars\n      .enter()\n      .append(\"rect\")\n      .attr(\"class\", \"bar\")\n      .attr(\"rx\", 3)\n      .attr(\"ry\", 3)\n      .attr(\"x\", d => xAxis(d.xAxisValue))\n      .attr(\"y\", d => yAxis(d.yAxisValue))\n      .attr(\"width\", 30)\n      .attr(\"height\", d => innerHeight - yAxis(d.yAxisValue))\n      .attr(\"fill\", \"#2A18FF\");\n  }, [data]);\n\n  return (\n    <svg ref={svgRef}>\n      <g ref={graphGroupRef} width={innerWidth} height={innerHeight}>\n        <g\n          ref={xAxisGroupRef}\n          className=\"xAxis\"\n          transform={`translate(0, ${innerHeight + 20})`}\n        />\n        <g\n          ref={yAxisGroupRef}\n          className=\"yAxis\"\n          transform={`translate(25,10)`}\n        />\n        <g\n          ref={barContainerRef}\n          transform={`translate(37, 10)`}\n          className=\"bars-group-container\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nBarChart.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  margin: PropTypes.object,\n  data: PropTypes.array\n};\n\nexport default BarChart;\n","import React from \"react\";\nimport \"./App.css\";\nimport BarChart from \"./components/BarChart\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"graph-container\">\n        <BarChart\n          width={775}\n          height={244}\n          margin={{ top: 20, right: 20, bottom: 20, left: 20 }}\n          data={[\n            { xAxisValue: \"India\", yAxisValue: 50 },\n            { xAxisValue: \"America\", yAxisValue: 30 },\n            { xAxisValue: \"Australia\", yAxisValue: 40 },\n            { xAxisValue: \"Pakistan\", yAxisValue: 25 },\n            { xAxisValue: \"China\", yAxisValue: 20 },\n            { xAxisValue: \"Russia\", yAxisValue: 10 },\n            { xAxisValue: \"Africa\", yAxisValue: 30 }\n          ]}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}